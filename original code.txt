import RPi.GPIO as GPIO
import time
import cv2
import numpy as np
import math
import requests
#import matplotlib.pyplot as plt
#from PIL import Image
import requests

url='http://192.168.100.4:8080/video'
#while True:
    #imgResp=urllib.request.urlopen(url)
    #imgNp=np.array(bytearray(imgResp.read()), dtype=np.uint8)
    #img=cv2.imdecode(imgNp, -1)
    #cv2.imshow('test',img)
    #cv2.waitKey(10)
#l1=[]
GPIO.setmode(GPIO.BOARD)
GPIO.setwarnings(False)
Ena1,Ena2=33,35
IN1,IN2,IN3,IN4=5,7,13,15
GPIO.setup(Ena1,GPIO.OUT)
GPIO.setup(Ena2, GPIO.OUT)

GPIO.setup(IN1, GPIO.OUT)
GPIO.setup(IN2, GPIO.OUT)
GPIO.setup(IN3, GPIO.OUT)
GPIO.setup(IN4, GPIO.OUT)

pwm1 = GPIO.PWM(Ena1,100)
pwm2 = GPIO.PWM(Ena2,100)
pwm1.start(50)
pwm2.start(50)
#Setting all the GPIO to LOW uring startup. Refer to schmeatic for your mapping
GPIO.output(IN1, GPIO.LOW)
GPIO.output(IN2, GPIO.LOW)
GPIO.output(IN3, GPIO.LOW)
GPIO.output(IN4, GPIO.LOW)

#Variable to store data about track and rotation.
theta=0
minLineLength = 5
maxLineGap = 10

#time.sleep(0.1)

cap = cv2.VideoCapture(url)
while True:
    #GPIO.output(IN1, GPIO.LOW)
   # GPIO.output(IN2, GPIO.LOW)
    #GPIO.output(IN3, GPIO.LOW)
   # GPIO.output(IN4, GPIO.LOW)
    ret, image = cap.read()
    if not ret:
        break

    #imgR=requests.get(url)
    #imgNp=np.array(bytearray(imgR.content), dtype=np.uint8)
    #frame = cv2.imdecode(imgNp, -1)
    
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) #Convert the image from color to Grayscale
    blurred = cv2.GaussianBlur(gray,(5,5),0)
    edged = cv2.Canny(blurred, 85, 85)
    
    lines = cv2.HoughLinesP(edged,1,np.pi/180,10,minLineLength,maxLineGap)

    
    #if(lines !=[]):
    if lines is not None:
        #try:
            #for x in range(0, len(lines)):
            for line in lines:
                #for x1,y1,x2,y2 in lines[x]:
                    x1,y1,x2,y2 = line[0]

                    cv2.line(image,(x1,y1),(x2,y2),(0,255,0),2)
                    #cv2.line(frame,(x1,y1),(x2,y2),(0,255,0),2)
                    theta=theta+math.atan2((y2-y1),(x2-x1))
                    threshold = 6
                    if(theta>threshold):
                        #print(theta)
                        GPIO.output(IN1, GPIO.LOW)
                        GPIO.output(IN2, GPIO.HIGH)
                        GPIO.output(IN4, GPIO.LOW)
                        GPIO.output(IN3, GPIO.HIGH)
                        print("left")
                        
           
                    elif(theta<(-threshold)):
                        #print(theta)
                        GPIO.output(IN2, GPIO.LOW)
                        GPIO.output(IN1, GPIO.HIGH)
                        GPIO.output(IN3, GPIO.LOW)
                        GPIO.output(IN4, GPIO.HIGH)
                        print("right")
           
                    #if(abs(theta)<threshold):
                    else:
                        #print(theta)
                        GPIO.output(IN1, GPIO.LOW)
                        GPIO.output(IN2, GPIO.HIGH)
                        GPIO.output(IN3, GPIO.LOW)
                        GPIO.output(IN4, GPIO.HIGH)
                        print ("straight")
                    
                    theta=0
    cv2.imshow("Frame",image)
    key=cv2.waitKey(1) & 0xFF
    if key == ord("q"):
        break
        #except:
            #pass
cap.release()
cv2.destroyAllWindows()
